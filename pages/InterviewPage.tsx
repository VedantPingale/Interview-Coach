
import React, { useState, useCallback } from 'react';
import DomainSelector from '../components/interview/DomainSelector';
import InterviewSession from '../components/interview/InterviewSession';
import AnalysisReport from '../components/interview/AnalysisReport';
import Spinner from '../components/ui/Spinner';
import { generateInterviewQuestions, analyzeInterviewAnswers } from '../services/aiService';
import type { Answer, AnalysisReportData } from '../types';
import { supabase } from '../services/supabaseService';
import { useAuth } from '../hooks/useAuth';
import type { InterviewSession as InterviewSessionType } from '../types';
import Button from '../components/ui/Button';

type InterviewState = 'selecting' | 'loading_questions' | 'in_progress' | 'analyzing' | 'report';

const InterviewPage: React.FC = () => {
  const [interviewState, setInterviewState] = useState<InterviewState>('selecting');
  const [questions, setQuestions] = useState<string[]>([]);
  const [currentSelection, setCurrentSelection] = useState<{ domain: string; specialization: string } | null>(null);
  const [analysisReport, setAnalysisReport] = useState<AnalysisReportData | null>(null);
  const [answers, setAnswers] = useState<Answer[]>([]);
  const { isAuthenticated } = useAuth();

  const handleDomainSelect = useCallback(async (domain: string, specialization: string) => {
    setCurrentSelection({ domain, specialization });
    setInterviewState('loading_questions');
    const fetchedQuestions = await generateInterviewQuestions(domain, specialization);
    setQuestions(fetchedQuestions);
    setInterviewState('in_progress');
  }, []);

  const handleInterviewFinish = useCallback(async (finalAnswers: Answer[]) => {
    setAnswers(finalAnswers);
    setInterviewState('analyzing');
    const report = await analyzeInterviewAnswers(finalAnswers);
    const reportData: AnalysisReportData = { ...report, answers: finalAnswers };
    setAnalysisReport(reportData);
    
    if (currentSelection && isAuthenticated) {
      // The `id` is now generated by the database.
      const newSession: Omit<InterviewSessionType, 'id'> = {
        date: new Date().toLocaleDateString(),
        domain: currentSelection.domain,
        specialization: currentSelection.specialization,
        report: reportData,
      };
      try {
        await supabase.addSession(newSession);
      } catch (error) {
        console.error("Failed to save session:", error);
        // Optionally, inform the user that the session could not be saved.
      }
    }
    
    setInterviewState('report');
  }, [currentSelection, isAuthenticated]);
  
  const handleRestart = () => {
    setInterviewState('selecting');
    setQuestions([]);
    setAnalysisReport(null);
    setCurrentSelection(null);
    setAnswers([]);
  };

  const renderContent = () => {
    switch (interviewState) {
      case 'selecting':
        return <DomainSelector onSelect={handleDomainSelect} />;
      case 'loading_questions':
        return <Spinner message="Generating your interview questions..." />;
      case 'in_progress':
        return <InterviewSession questions={questions} onFinish={handleInterviewFinish} />;
      case 'analyzing':
        return <Spinner message="Analyzing your performance..." />;
      case 'report':
        return analysisReport && (
          <div className="flex flex-col items-center">
            <AnalysisReport report={analysisReport} />
            <Button onClick={handleRestart} className="mt-8">
              Start New Interview
            </Button>
          </div>
        );
      default:
        return <div>Something went wrong.</div>;
    }
  };

  return (
    <div>
      {renderContent()}
    </div>
  );
};

export default InterviewPage;
